import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
import matplotlib.pyplot as plt

# Load Boston Housing dataset
(x_train, y_train), (x_test, y_test) = keras.datasets.boston_housing.load_data()

print("Training samples:", x_train.shape)
print("Testing samples:", x_test.shape)

# Compute mean and std on training set
mean = x_train.mean(axis=0)
std = x_train.std(axis=0)

# Normalize both train and test data
x_train = (x_train - mean) / std
x_test = (x_test - mean) / std


model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(x_train.shape[1],)),
    layers.Dense(64, activation='relu'),
    layers.Dense(1)  # Only one output for price
])


model.compile(
    optimizer='adam',
    loss='mse',
    metrics=['mae']
)


history = model.fit(
    x_train, y_train,
    epochs=100,
    batch_size=32,
    validation_split=0.2,
    verbose=1
)


loss, mae = model.evaluate(x_test, y_test, verbose=2)
print(f"Test MAE: {mae:.2f}")


# Plot training and validation loss
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss During Training')
plt.xlabel('Epoch')
plt.ylabel('MSE')
plt.legend()
plt.show()

# Plot MAE
plt.plot(history.history['mae'], label='Train MAE')
plt.plot(history.history['val_mae'], label='Validation MAE')
plt.title('MAE During Training')
plt.xlabel('Epoch')
plt.ylabel('MAE')
plt.legend()
plt.show()

